
test('Function with no parameters', (api) -> {
	var fn = () -> {
		return 5
	}

	api.eq(fn(), 5)
	api.done()
})

test('Function with splatt parameter', (api) -> {
	var fn = (...args) -> {
		return args[0] + args[1] + args[2]
	}

	api.eq(fn(1, 2, 3), 6)
	api.done()
})

test('Function `this` value in method (bound `this`)', (api) -> {
	var obj = {
		fn: () -> {
			api.eq(this, obj)
		}
	}

	obj.fn()
	api.done()
})

test('Function `this` value in method (unbound `this`)', (api) -> {
	var obj = {
		fn: () -> {
			return {
				fn: () => {
					api.eq(this, obj)
				}
			}
		}
	}

	obj.fn().fn()
	api.done()
})

test('Function with default parameter (undefined)', (api) -> {
	var fn = (a, b = 2) -> {
		return a * b
	}

	api.eq(fn(5), 10)
	api.done()
})

test('Function with default parameter (defined)', (api) -> {
	var fn = (a, b = 2) -> {
		return a * b
	}

	api.eq(fn(5, 4), 20)
	api.done()
})


test('Function with multiple default parameters', (api) -> {
	var fn = (a, b = 2, c) -> {
		return a * b + c
	}

	api.eq(fn(5, undefined, 3), 13)
	api.done()
})

test('Function with default object destructuring', (api) -> {
	var fn = (a, {b, c} = {b: 4, c: 2}) -> {
		return a * b + c
	}

	api.eq(fn(5), 22)
	api.eq(fn(5, {b: 3, c: 4}), 19)
	api.done()
})

test('Function with default array destructuring', (api) -> {
	var fn = (a, [b, c] = [4, 2]) -> {
		return a * b - c
	}

	api.eq(fn(2), 6)
	api.eq(fn(5, [2, 3]), 7)
	api.done()
})

test('Function declaration basic functionality', (api) -> {
	fn() -> {
		var a = 3
		return a ^ a
	}
	
	api.eq(fn(), 27)
	api.done()
})

test('Function declaration bubbles to top of scope', (api) -> {
	try
		var b = fn()
		api.eq(b, 4)
		api.done()
	catch e
		api.fail()
	
	fn() -> {
		var a = 2
		return a ^ a
	}
})

test('Empty function', (api) -> {
	a() -> {
		
	}
	
	api.eq(a(), undefined)
	api.done()
})

test('Return-left shorthand syntax', (api) -> {
	a(val) -> {
		|< 5 * 5 + 3
	}
	
	api.eq(a(5), 28)
	api.done()
})


test('Return-right shorthand syntax', (api) -> {
	a(val) -> {
		5 * 5 - 4 >|
		3 * 3 + 4 >|
	}
	
	api.eq(a(5), 21)
	api.done()
})

test('One-line functions', (api) -> {
	square(val) -> val ^ 2
	cube(val) -> val ^ 3

	api.eq(square(5), 25)
	api.eq(cube(5), 125)
	api.done()
})