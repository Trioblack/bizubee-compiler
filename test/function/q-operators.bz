

test('Q-expression', (api) -> {
	const ob = {a: 1, b: 5, c: null, d: undefined}

	api.eq(ob.a?, true)
	api.eq(ob.b?, true)
	api.eq(ob.c?, false)
	api.eq(ob.d?, false)
	api.eq(ob.e?, false)
	api.done()
})

test('Q-access', (api) -> {
	const ob = {a: 1, b: {}, c: null, d: undefined}

	api.eq(ob?.a, 1)
	api.eq(ob.b?.c?.a.b.b.b, undefined)
	api.done()
})

test('Q-access precedence', (api) -> {
	const ob = {a: 1, b: {}, c: null, d: undefined}

	api.eq(ob?.a?, true)
	api.done()
})

test('Q-access computed', (api) -> {
	const ob = {a: 1, b: {}, c: null, d: undefined}

	api.eq(ob?['a'], 1)
	api.eq(ob.b?[33]?[35].b.b.b, undefined)
	api.done()
})

test('Q-call', (api) -> {
	const ob = {
		a: 1
		b: {}
		c: null
		d: () -> {
			return 4
		}
	}

	api.eq(ob.d?(), 4)
	api.eq(ob.c?(), undefined)
	api.eq(ob.c?()?()?(), undefined)
	api.eq(ob.b.c?.h(), undefined)
	api.done()
})

test('Q-call this value', (api) -> {
	const ob = {
		a: 1
		b: {}
		c: null
		d: () -> {
			return this
		}
	}

	api.eq(ob.d?(), ob)
	api.done()
})

test('Q-call this value (computed method)', (api) -> {
	const gen = (() -> * {
		yield 'd'
		yield 'n'
		yield 5
	})()

	const ob = {
		a: 1
		b: {}
		c: null
		d: () -> {
			return this
		}
	}

	api.eq(ob[gen.next().value]?(), ob)
	api.eq(ob[gen.next().value]?(), undefined)
	api.done()
})

test('Q-constructor call', (api) -> {
	const ob = {
		a: 1
		b: {}
		c: null
		d: () -> {
			this.prop = 4
		}
	}

	api.eq(new ob.d?().prop, 4)
	api.eq(new ob.c?(), undefined)
	api.done()
})
